export const data =[
    {
        question : "Suppose we have an O(n) time algorithm that finds the median of an unsorted array. Now consider a QuickSort implementation where we first find the median using the above algorithm, then use the median as a pivot. What will be the worst-case time complexity of this modified QuickSort? ",
        option1 : "O(n^2Logn)",
        option2 : "O(n^2)",
        option3 : "O(n logn logn)",
        option4: "O(nlogn)",
        ans: 4,
    },
    {
        question : "Given an unsorted array. The array has this property that every element in the array is at most k distance from its position in a sorted array where k is a positive integer smaller than the size of an array. Which sorting algorithm can be easily modified for sorting this array and what is the obtainable time complexity?",
        option1 : "Insertion Sort with time complexity O(kn)",
        option2 : "Heap Sort with time complexity O(nLogk)",
        option3 : "Quick Sort with time complexity O(kLogk)",
        option4: "Merge Sort with time complexity O(kLogk)",
        ans: 2,
    },
    {
        question : "If one uses a straight two-way merge sort algorithm to sort the following elements in ascending order 20, 47, 15, 8, 9, 4, 40, 30, 12, 17 then the order of these elements after the second pass of the algorithm is:",
        option1 : "8, 9, 15, 20, 47, 4, 12, 17, 30, 40",
        option2 : "8, 15, 20, 47, 4, 9, 30, 40, 12, 17",
        option3 : "15, 20, 47, 4, 8, 9, 12, 30, 40, 17",
        option4: "4, 8, 9, 15, 20, 47, 12, 17, 30, 40",
        ans: 2,
    },
    {
        question : "Assume that we use Bubble Sort to sort n distinct elements in ascending order. When does the best case of Bubble Sort occur?",
        option1 : "When elements are sorted in ascending order",
        option2 : "When elements are sorted in descending order",
        option3 :"When elements are not sorted by any order",
        option4: "There is no best case for Bubble Sort. It always takes O(n*n) time",
        ans: 1,
    },
    {
        question : "Let P be a QuickSort Program to sort numbers in ascending order using the first element as pivot. Let t1 and t2 be the number of comparisons made by P for the inputs {1, 2, 3, 4, 5} and {4, 1, 5, 3, 2} respectively. Which one of the following holds?",
        option1 : "t1 = 5",
        option2 : "t1 < t2",
        option3 : "t1 > t2",
        option4: "t1 = t2",
        ans: 3,
    },
    {
        question : "Which of the following is not a stable sorting algorithm in its typical implementation.",
        option1 : "Insertion sort",
        option2 : "Merge sort",
        option3 : "Quick sort",
        option4: "Bubble sort",
        ans: 3,
    },
    {
        question : "Suppose we are sorting an array of eight integers using quicksort, and we have just finished the first partitioning with the array looking like this: 2  5  1  7  9  12  11  10 . Which statement is correct? ",
        option1 : "The pivot could be either the 7 or the 9.",
        option2 : "The pivot could be the 7, but it is not the 9",
        option3 : "The pivot is not the 7, but it could be the 9",
        option4: "Neither the 7 nor the 9 is the pivo",
        ans: 1,
    },
    {
        question : "Consider the array A[]= {6,4,8,1,3} apply the insertion sort to sort the array . Consider the cost associated with each sort is 25 rupees , what is the total cost of the insertion sort when element 1 reaches the first position of the array?",
        option1 : "50",
        option2 : "25",
        option3 : "75",
        option4: "100",
        ans: 1,
    },
    {
        question : "Which one of the following in place sorting algorithms needs the minimum number of swaps?",
        option1 : "Quick sort",
        option2 : "Insertion sort",
        option3 : "Selection sort",
        option4: "Heap sort",
        ans: 3,
    },
    {
        question : "Which sorting algorithms is most efficient to sort string consisting of ASCII characters?",
        option1 : "Quick sort",
        option2 : "Heap sort",
        option3 : "Merge sort",
        option4: "Counting sort",
        ans: 4,
    },
];